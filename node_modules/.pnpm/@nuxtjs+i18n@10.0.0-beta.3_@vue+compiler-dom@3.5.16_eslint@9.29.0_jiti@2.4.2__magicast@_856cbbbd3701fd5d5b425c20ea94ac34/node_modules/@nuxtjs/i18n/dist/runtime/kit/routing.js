function matchBrowserLocale(locales, browserLocales) {
  const matchedLocales = [];
  for (const [index, browserCode] of browserLocales.entries()) {
    const matchedLocale = locales.find((l) => l.language?.toLowerCase() === browserCode.toLowerCase());
    if (matchedLocale) {
      matchedLocales.push({ code: matchedLocale.code, score: 1 - index / browserLocales.length });
      break;
    }
  }
  for (const [index, browserCode] of browserLocales.entries()) {
    const languageCode = browserCode.split("-")[0].toLowerCase();
    const matchedLocale = locales.find((l) => l.language?.split("-")[0].toLowerCase() === languageCode);
    if (matchedLocale) {
      matchedLocales.push({ code: matchedLocale.code, score: 0.999 - index / browserLocales.length });
      break;
    }
  }
  return matchedLocales;
}
function compareBrowserLocale(a, b) {
  if (a.score === b.score) {
    return b.code.length - a.code.length;
  }
  return b.score - a.score;
}
export function findBrowserLocale(locales, browserLocales) {
  const normalizedLocales = locales.map((l) => ({ code: l.code, language: l.language || l.code }));
  const matchedLocales = matchBrowserLocale(normalizedLocales, browserLocales);
  if (matchedLocales.length === 0) {
    return "";
  }
  if (matchedLocales.length > 1) {
    matchedLocales.sort(compareBrowserLocale);
  }
  return matchedLocales[0].code;
}
export function getRouteNameLocaleRegex(options, localesPattern = getLocalesPattern(options.localeCodes)) {
  const defaultSuffixPattern = `(?:${options.separator}${options.defaultSuffix})?`;
  return new RegExp(`${options.separator}${localesPattern}${defaultSuffixPattern}$`, "i");
}
export function createNameLocaleRegexMatcher(re) {
  return (val) => val.match(re)?.[1] ?? "";
}
export function normalizeRouteName(routeName) {
  if (typeof routeName === "string") return routeName;
  if (routeName != null) return routeName.toString();
  return "";
}
export function getRouteName(route) {
  if (typeof route === "object") return normalizeRouteName(route?.name);
  return normalizeRouteName(route);
}
export function getRouteBaseName(route, separator) {
  return getRouteName(route).split(separator)[0];
}
export function getLocalizedRouteName(routeName, locale, isDefault, separator = "___", defaultSuffix = "default") {
  if (isDefault) {
    return routeName + separator + locale + separator + defaultSuffix;
  }
  return routeName + separator + locale;
}
export function getRoutePathLocaleRegex(localeCodes, localesPattern = getLocalesPattern(localeCodes)) {
  return new RegExp(`^/${localesPattern}(?:/|$)`, "i");
}
function getLocalesPattern(localeCodes) {
  return `(${localeCodes.join("|")})`;
}
export function createLocaleFromRouteGetter(options) {
  const localesPattern = getLocalesPattern(options.localeCodes);
  const regexpName = getRouteNameLocaleRegex(options, localesPattern);
  const regexpPath = getRoutePathLocaleRegex(options.localeCodes, localesPattern);
  const matchPath = createNameLocaleRegexMatcher(regexpPath);
  const matchName = createNameLocaleRegexMatcher(regexpName);
  return (route) => {
    if (typeof route === "string") {
      return matchPath(route);
    }
    if (typeof route === "symbol") {
      return matchPath(String(route));
    }
    if (route?.name) {
      return matchName(normalizeRouteName(route.name));
    }
    if (route?.path) {
      return matchPath(route.path);
    }
    return "";
  };
}
