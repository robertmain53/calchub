import { computed, getCurrentScope, onScopeDispose, ref, useHead, watch } from "#imports";
import { assign } from "@intlify/shared";
import { localeHead as _localeHead } from "#i18n-kit/head";
import { localeRoute, switchLocalePath } from "./routing.js";
function createHeadContext(ctx, config, locale = ctx.getLocale(), locales = ctx.getLocales(), baseUrl = ctx.getBaseUrl(), routingOptions = ctx.getRoutingOptions()) {
  const currentLocale = locales.find((l) => l.code === locale) || { code: locale };
  const canonicalQueries = typeof config.seo === "object" && config.seo?.canonicalQueries || [];
  if (!baseUrl) {
    console.warn("I18n `baseUrl` is required to generate valid SEO tag links.");
  }
  return {
    ...config,
    locales,
    baseUrl,
    canonicalQueries,
    hreflangLinks: routingOptions.hreflangLinks,
    defaultLocale: routingOptions.defaultLocale,
    strictCanonicals: routingOptions.strictCanonicals,
    getRouteBaseName: ctx.getRouteBaseName,
    getCurrentRoute: () => ctx.router.currentRoute.value,
    getCurrentLanguage: () => currentLocale.language,
    getCurrentDirection: () => currentLocale.dir || __DEFAULT_DIRECTION__,
    getLocaleRoute: (route) => localeRoute(ctx, route),
    getLocalizedRoute: (locale2, route) => switchLocalePath(ctx, locale2, route),
    getRouteWithoutQuery: () => assign({}, ctx.router.resolve({ query: {} }), { meta: ctx.router.currentRoute.value.meta })
  };
}
export function localeHead(ctx, { dir = true, lang = true, seo = true, key = "key" }) {
  return _localeHead(createHeadContext(ctx, { dir, lang, seo, key }));
}
export function _useLocaleHead(ctx, options) {
  const metaObject = ref(_localeHead(createHeadContext(ctx, options)));
  if (import.meta.client) {
    const unsub = watch(
      [() => ctx.router.currentRoute.value, () => ctx.getLocale()],
      () => metaObject.value = _localeHead(createHeadContext(ctx, options))
    );
    if (getCurrentScope()) {
      onScopeDispose(unsub);
    }
  }
  return metaObject;
}
export function _useSetI18nParams(ctx, seo, router = ctx.router) {
  const head = useHead({});
  const _i18nParams = ref({});
  const i18nParams = computed({
    get() {
      return router.currentRoute.value.meta[__DYNAMIC_PARAMS_KEY__];
    },
    set(val) {
      _i18nParams.value = val;
      router.currentRoute.value.meta[__DYNAMIC_PARAMS_KEY__] = val;
    }
  });
  const unsub = watch(
    () => router.currentRoute.value.fullPath,
    () => {
      router.currentRoute.value.meta[__DYNAMIC_PARAMS_KEY__] = _i18nParams.value;
    }
  );
  if (getCurrentScope()) {
    onScopeDispose(unsub);
  }
  const ctxOptions = { dir: false, lang: false, key: "id", seo: seo ?? true };
  return function(params) {
    i18nParams.value = { ...params };
    const { link, meta } = _localeHead(createHeadContext(ctx, ctxOptions));
    head?.patch({ link, meta });
  };
}
