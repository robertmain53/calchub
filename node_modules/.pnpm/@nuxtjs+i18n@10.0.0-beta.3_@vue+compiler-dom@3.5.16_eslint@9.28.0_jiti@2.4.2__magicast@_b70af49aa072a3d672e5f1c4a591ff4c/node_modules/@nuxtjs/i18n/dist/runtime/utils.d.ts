import { type RouteLike } from './routing/routing.js';
import type { I18n, Locale } from 'vue-i18n';
import type { NuxtApp } from '#app';
import type { RouteLocationPathRaw, RouteLocationResolvedGeneric, Router, RouteRecordNameGeneric } from 'vue-router';
import type { I18nPublicRuntimeConfig, LocaleObject } from '#internal-i18n-types';
import type { CompatRoute, RouteLocationGenericPath } from './types.js';
export declare function formatMessage(message: string): string;
/**
 * Common options used internally by composable functions, these
 * are initialized on request at the start of i18n:plugin.
 *
 * @internal
 */
export type ComposableContext = {
    router: Router;
    getRoutingOptions: () => {
        defaultLocale: string;
        /** Use `canonicalQueries` for alternate links */
        strictCanonicals: boolean;
        /** Enable/disable hreflangLinks */
        hreflangLinks: boolean;
    };
    getLocale: () => string;
    getLocales: () => LocaleObject[];
    getBaseUrl: () => string;
    /** Extracts the route base name (without locale suffix) */
    getRouteBaseName: (route: RouteRecordNameGeneric | RouteLocationGenericPath | null) => string | undefined;
    /** Modifies the resolved localized path. Middleware for `switchLocalePath` */
    afterSwitchLocalePath: (path: string, locale: string) => string;
    /** Provides localized dynamic parameters for the current route */
    getLocalizedDynamicParams: (locale: string) => Record<string, unknown> | undefined;
    /** Prepares a route object to be resolved as a localized route */
    resolveLocalizedRouteObject: (route: RouteLike, locale: string) => RouteLike;
};
export declare const isRouteLocationPathRaw: (val: RouteLike) => val is RouteLocationPathRaw;
export declare function useComposableContext(): ComposableContext;
type ComposableContextOptions = {
    i18n: I18n;
    runtimeI18n: I18nPublicRuntimeConfig;
    getDomainFromLocale: (locale: Locale) => string | undefined;
};
export declare function createComposableContext({ i18n: _i18n, runtimeI18n, getDomainFromLocale }: ComposableContextOptions): ComposableContext;
export declare function loadAndSetLocale(newLocale: Locale, initial?: boolean): Promise<boolean>;
export declare function detectLocale(route: string | CompatRoute, routeLocale: string, currentLocale: string | undefined, localeCookie: string | undefined): string;
type DetectRedirectOptions = {
    to: CompatRoute;
    from?: CompatRoute;
    /** The locale we want to navigate to */
    locale: Locale;
    /** Locale detected from route */
    routeLocale: string;
};
/**
 * Returns a localized path to redirect to, or an empty string if no redirection should occur
 *
 * @param inMiddleware - whether this is called during navigation middleware
 */
export declare function detectRedirect({ to, from, locale, routeLocale }: DetectRedirectOptions, inMiddleware?: boolean): string;
type NavigateArgs = {
    nuxt: NuxtApp;
    redirectPath: string;
    locale: string;
    route: CompatRoute;
};
export declare function navigate({ nuxt, locale, route, redirectPath }: NavigateArgs, enableNavigate?: boolean): Promise<string | false | void | import("vue-router").RouteLocationAsRelativeGeneric | import("vue-router").RouteLocationAsPathGeneric | import("vue-router").NavigationFailure>;
export declare function prefixable(currentLocale: string, defaultLocale: string): boolean;
/**
 * Returns a getter function which returns the baseUrl
 */
export declare function createBaseUrlGetter(nuxt: NuxtApp): () => string;
/**
 * Returns a getter function which returns a localized route name for the given route and locale.
 * The returned function can vary based on the strategy and domain configuration.
 */
export declare function createLocaleRouteNameGetter(defaultLocale: string): (name: RouteRecordNameGeneric | null, locale: string) => string;
/**
 * Factory function which returns a resolver function based on the routing strategy.
 */
export declare function createLocalizedRouteByPathResolver(router: Router): (route: RouteLocationPathRaw, locale: Locale) => RouteLocationPathRaw | RouteLocationResolvedGeneric;
export declare function createNuxtI18nDev(): {
    resetI18nProperties: (locale?: string) => Promise<void>;
};
export {};
