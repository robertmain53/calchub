import { isString } from "@intlify/shared";
import { useCookie, useNuxtApp, useRequestHeader, useRuntimeConfig } from "#imports";
import { localeCodes, normalizedLocales } from "#build/i18n.options.mjs";
import { findBrowserLocale, getRoutePathLocaleRegex } from "#i18n-kit/routing";
import { createLogger } from "#nuxt-i18n/logger";
function parseAcceptLanguage(input = "") {
  return input.split(",").map((tag) => tag.split(";")[0]);
}
export function getCompatRoutePath(route) {
  return isString(route) ? route : route.path;
}
export function getBrowserLocale() {
  const browserLocales = import.meta.client ? navigator.languages : parseAcceptLanguage(useRequestHeader("accept-language"));
  return findBrowserLocale(
    normalizedLocales.map((x) => ({ code: x.code, language: x.language ?? x.code })),
    browserLocales
  ) || void 0;
}
export function createI18nCookie() {
  const detect = useRuntimeConfig().public.i18n.detectBrowserLanguage;
  const cookieKey = detect && detect.cookieKey || __DEFAULT_COOKIE_KEY__;
  const date = /* @__PURE__ */ new Date();
  const cookieOptions = {
    path: "/",
    readonly: false,
    expires: new Date(date.setDate(date.getDate() + 365)),
    sameSite: detect && detect.cookieCrossOrigin ? "none" : "lax",
    domain: detect && detect.cookieDomain || void 0,
    secure: detect && detect.cookieCrossOrigin || detect && detect.cookieSecure
  };
  return useCookie(cookieKey, cookieOptions);
}
export function getLocaleCookie(cookieRef, detect, defaultLocale) {
  const logger = /* @__PURE__ */ createLogger(`getLocaleCookie:${import.meta.client ? "client" : "server"}`);
  __DEBUG__ && logger.log({
    useCookie: detect && detect.useCookie,
    cookieKey: detect && detect.cookieKey,
    localeCodes
  });
  if (detect === false || !detect.useCookie) {
    return;
  }
  const localeCode = cookieRef.value ?? void 0;
  if (localeCode == null) {
    __DEBUG__ && logger.log(`none`);
    return;
  }
  if (localeCodes.includes(localeCode)) {
    __DEBUG__ && logger.log(`locale from cookie: `, localeCode);
    return localeCode;
  }
  if (defaultLocale) {
    __DEBUG__ && logger.log(`unknown locale cookie (${localeCode}), setting to defaultLocale (${defaultLocale})`);
    cookieRef.value = defaultLocale;
    return defaultLocale;
  }
  __DEBUG__ && logger.log(`unknown locale cookie (${localeCode}), unsetting cookie`);
  cookieRef.value = void 0;
}
const LOCALE_PATH_RE = getRoutePathLocaleRegex(localeCodes);
export function detectBrowserLanguage(route, localeCookie, locale = "") {
  const logger = /* @__PURE__ */ createLogger("detectBrowserLanguage");
  const _detect = useRuntimeConfig().public.i18n.detectBrowserLanguage;
  if (!_detect) {
    return { locale: "", error: "disabled" };
  }
  const nuxtApp = useNuxtApp();
  const firstAccess = nuxtApp._vueI18n.__firstAccess;
  __DEBUG__ && logger.log({ firstAccess });
  if (__IS_SSG__ && firstAccess && __I18N_STRATEGY__ === "no_prefix" && import.meta.server) {
    return { locale: "", error: "detect_ignore_on_ssg" };
  }
  if (!firstAccess) {
    return { locale: __I18N_STRATEGY__ === "no_prefix" ? locale : "", error: "first_access_only" };
  }
  __DEBUG__ && logger.log({ locale, path: getCompatRoutePath(route), strategy: __I18N_STRATEGY__, ..._detect });
  if (__I18N_STRATEGY__ !== "no_prefix") {
    const path = getCompatRoutePath(route);
    if (_detect.redirectOn === "root" && path !== "/") {
      return { locale: "", error: "not_redirect_on_root" };
    }
    if (_detect.redirectOn === "no prefix" && !_detect.alwaysRedirect && path.match(LOCALE_PATH_RE)) {
      return { locale: "", error: "not_redirect_on_no_prefix" };
    }
  }
  const cookieMatch = _detect.useCookie && localeCookie || void 0;
  if (cookieMatch) {
    return { locale: cookieMatch, from: "cookie" };
  }
  const browserMatch = nuxtApp.$i18n.getBrowserLocale();
  if (browserMatch) {
    return { locale: browserMatch, from: "navigator_or_header" };
  }
  return { locale: _detect.fallbackLocale || "", from: "fallback" };
}
