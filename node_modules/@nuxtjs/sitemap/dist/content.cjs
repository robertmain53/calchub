'use strict';

const content = require('@nuxt/content');

const schema = content.z.object({
  sitemap: content.z.object({
    loc: content.z.string().optional(),
    lastmod: content.z.date().optional(),
    changefreq: content.z.union([content.z.literal("always"), content.z.literal("hourly"), content.z.literal("daily"), content.z.literal("weekly"), content.z.literal("monthly"), content.z.literal("yearly"), content.z.literal("never")]).optional(),
    priority: content.z.number().optional(),
    images: content.z.array(content.z.object({
      loc: content.z.string(),
      caption: content.z.string().optional(),
      geo_location: content.z.string().optional(),
      title: content.z.string().optional(),
      license: content.z.string().optional()
    })).optional(),
    videos: content.z.array(content.z.object({
      content_loc: content.z.string(),
      player_loc: content.z.string().optional(),
      duration: content.z.string().optional(),
      expiration_date: content.z.date().optional(),
      rating: content.z.number().optional(),
      view_count: content.z.number().optional(),
      publication_date: content.z.date().optional(),
      family_friendly: content.z.boolean().optional(),
      tag: content.z.string().optional(),
      category: content.z.string().optional(),
      restriction: content.z.object({
        relationship: content.z.literal("allow").optional(),
        value: content.z.string().optional()
      }).optional(),
      gallery_loc: content.z.string().optional(),
      price: content.z.string().optional(),
      requires_subscription: content.z.boolean().optional(),
      uploader: content.z.string().optional()
    })).optional()
  }).optional()
});
function asSitemapCollection(collection) {
  if (collection.type === "page") {
    collection.schema = collection.schema ? schema.extend(collection.schema.shape) : schema;
  }
  return collection;
}

exports.asSitemapCollection = asSitemapCollection;
exports.schema = schema;
