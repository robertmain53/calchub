import type { I18nOptions, Locale, FallbackLocale, LocaleMessages, DefineLocaleMessage } from 'vue-i18n';
import type { NuxtApp } from '#app';
import type { VueI18nConfig } from '#internal-i18n-types';
import type { CoreContext } from '@intlify/h3';
type MessageLoaderFunction<T = DefineLocaleMessage> = (locale: Locale) => Promise<LocaleMessages<T>>;
type MessageLoaderResult<T, Result = MessageLoaderFunction<T> | LocaleMessages<T>> = {
    default: Result;
} | Result;
type LocaleLoader<T = LocaleMessages<DefineLocaleMessage>> = {
    key: string;
    cache: boolean;
    load: () => Promise<MessageLoaderResult<T>>;
};
export declare function loadVueI18nOptions(vueI18nConfigs: VueI18nConfig[], nuxt?: {
    runWithContext: NuxtApp["runWithContext"];
}): Promise<I18nOptions>;
export declare function makeFallbackLocaleCodes(fallback: FallbackLocale, locales: Locale[]): Locale[];
export declare function loadInitialMessages(messages: LocaleMessages<DefineLocaleMessage>, localeLoaders: Record<Locale, LocaleLoader[]>, options: {
    localeCodes: string[];
    defaultLocale: Locale;
    initialLocale: Locale;
    fallbackLocale: FallbackLocale;
}, nuxt?: {
    runWithContext: NuxtApp["runWithContext"];
}): Promise<LocaleMessages<DefineLocaleMessage>>;
export declare function loadLocale(locale: Locale, localeLoaders: Record<Locale, LocaleLoader[]>, setter: (locale: Locale, message: LocaleMessages<DefineLocaleMessage>) => void, nuxt?: {
    runWithContext: NuxtApp["runWithContext"];
}): Promise<void>;
type LocaleLoaderMessages = CoreContext<Locale, DefineLocaleMessage>['messages'] | LocaleMessages<DefineLocaleMessage, Locale>;
export declare function loadAndSetLocaleMessages(locale: Locale, localeLoaders: Record<Locale, LocaleLoader[]>, messages: LocaleLoaderMessages, nuxt?: {
    runWithContext: NuxtApp["runWithContext"];
}): Promise<void>;
export {};
