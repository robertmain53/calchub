import { useNuxtApp, useCookie, useRuntimeConfig } from "#imports";
import { ref } from "vue";
import { _useLocaleHead, _useSetI18nParams } from "../routing/head.js";
import { useComposableContext } from "../utils.js";
import { localePath, localeRoute, switchLocalePath } from "../routing/routing.js";
export * from "vue-i18n";
export * from "./shared.js";
export function useSetI18nParams(seo) {
  const common = useComposableContext();
  return _useSetI18nParams(common, seo);
}
export function useLocaleHead({
  dir = true,
  lang = true,
  seo = true,
  key = "key"
} = {}) {
  const common = useComposableContext();
  return _useLocaleHead(common, { dir, lang, seo, key });
}
export function useRouteBaseName() {
  const common = useComposableContext();
  return (route) => {
    if (route == null) return;
    return common.getRouteBaseName(route) || void 0;
  };
}
export function useLocalePath() {
  const common = useComposableContext();
  return (route, locale) => localePath(common, route, locale);
}
export function useLocaleRoute() {
  const common = useComposableContext();
  return (route, locale) => localeRoute(common, route, locale);
}
export function useSwitchLocalePath() {
  const common = useComposableContext();
  return (locale) => switchLocalePath(common, locale);
}
export function useBrowserLocale() {
  return useNuxtApp().$i18n.getBrowserLocale() || null;
}
export function useCookieLocale() {
  const locale = ref("");
  const detect = useRuntimeConfig().public.i18n.detectBrowserLanguage;
  if (!detect || !detect.useCookie) {
    return locale;
  }
  const locales = useNuxtApp()._nuxtI18n.getLocales();
  const code = useCookie(detect.cookieKey).value;
  if (code && locales.some((x) => x.code === code)) {
    locale.value = code;
  }
  return locale;
}
const warnRuntimeUsage = (method) => console.warn(
  method + "() is a compiler-hint helper that is only usable inside the script block of a single file component. Its arguments should be compiled away and passing it at runtime has no effect."
);
export function defineI18nRoute(route) {
  if (import.meta.dev) {
    warnRuntimeUsage("defineI18nRoute");
  }
}
